// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Tank_Wiki_React_ASP_App.Server.Models.ModelsManyToMany;

namespace Tank_Wiki_React_ASP_App.Server.Models;

public partial class db_TankWikiContext : DbContext
{
    public db_TankWikiContext(DbContextOptions<db_TankWikiContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Armor> Armors { get; set; }

    public virtual DbSet<Engine> Engines { get; set; }

    public virtual DbSet<Gun> Guns { get; set; }

    public virtual DbSet<Nation> Nations { get; set; }

    public virtual DbSet<Radio> Radios { get; set; }

    public virtual DbSet<Suspension> Suspensions { get; set; }

    public virtual DbSet<Tank> Tanks { get; set; }

    public virtual DbSet<TankType> TankTypes { get; set; }

    public virtual DbSet<Turret> Turrets { get; set; }
    public DbSet<Picture> Pictures { get; set; }

    ////////////////////////////////  ModelOneToMany
    public DbSet<TurretGun> TurretGuns { get; set; }
    public DbSet<TankTurret> TankTurrets { get; set; }
    public DbSet<TankEngine> TankEngines { get; set; }
    public DbSet<TankSuspension> TankSuspensions { get; set; }
    public DbSet<TankRadio> TankRadios { get; set; }
    public DbSet<TankPicture> TankPictures { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        
        /////////////////////////// Tank
        modelBuilder.Entity<Tank>()
            .HasOne(t => t.TankType)
            .WithMany(tt => tt.Tanks)
            .HasForeignKey(t => t.TypeId);

        /// // Визначення відношення один-до-багатьох між Nation та Tank
        modelBuilder.Entity<Tank>()
            .HasOne(t => t.Nation)
            .WithMany(n => n.Tanks)
            .HasForeignKey(t => t.NationId);

        modelBuilder.Entity<Tank>()
           .HasOne(t => t.Armor)
           .WithOne(a => a.Tank)
           .HasForeignKey<Armor>(a => a.TankId);

        //////////////////////////   TankTurret
        modelBuilder.Entity<TankTurret>()
           .HasKey(tg => new { tg.TurretId, tg.TankId });

        modelBuilder.Entity<TankTurret>()
            .HasOne(tg => tg.Turret)
            .WithMany(t => t.TankTurrets)
            .HasForeignKey(tg => tg.TurretId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<TankTurret>()
            .HasOne(tg => tg.Tank)
            .WithMany(g => g.TankTurrets)
            .HasForeignKey(tg => tg.TankId)
            .OnDelete(DeleteBehavior.Restrict);

        //////////////////////////   TurretGun
        modelBuilder.Entity<TurretGun>()
            .HasKey(tg => new { tg.TurretId, tg.GunId });

        modelBuilder.Entity<TurretGun>()
            .HasOne(tg => tg.Turret)
            .WithMany(t => t.TurretGuns)
            .HasForeignKey(tg => tg.TurretId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<TurretGun>()
            .HasOne(tg => tg.Gun)
            .WithMany(g => g.TurretGuns)
            .HasForeignKey(tg => tg.GunId)
            .OnDelete(DeleteBehavior.Restrict);

        //////////////////////////    TankEngine

        modelBuilder.Entity<TankEngine>()
           .HasKey(te => new { te.EngineId, te.TankId });

        modelBuilder.Entity<TankEngine>()
            .HasOne(te => te.Engine)
            .WithMany(e => e.TankEngines)
            .HasForeignKey(te => te.EngineId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<TankEngine>()
            .HasOne(tg => tg.Tank)
            .WithMany(g => g.TankEngines)
            .HasForeignKey(tg => tg.TankId)
            .OnDelete(DeleteBehavior.Restrict);

        //////////////////////////   TankSuspension
        modelBuilder.Entity<TankSuspension>()
           .HasKey(ts => new { ts.SuspensionId, ts.TankId });

        modelBuilder.Entity<TankSuspension>()
            .HasOne(ts => ts.Suspension)
            .WithMany(s => s.TankSuspensions)
            .HasForeignKey(ts => ts.SuspensionId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<TankSuspension>()
            .HasOne(ts => ts.Tank)
            .WithMany(t => t.TankSuspensions)
            .HasForeignKey(ts => ts.TankId)
            .OnDelete(DeleteBehavior.Restrict);

        //////////////////////////   TankRadio
        modelBuilder.Entity<TankRadio>()
           .HasKey(ts => new { ts.RadioId, ts.TankId });

        modelBuilder.Entity<TankRadio>()
            .HasOne(tr => tr.Radio)
            .WithMany(r => r.TankRadios)
            .HasForeignKey(tr => tr.RadioId)
            .OnDelete(DeleteBehavior.Restrict);

        modelBuilder.Entity<TankRadio>()
            .HasOne(ts => ts.Tank)
            .WithMany(t => t.TankRadios)
            .HasForeignKey(ts => ts.TankId)
            .OnDelete(DeleteBehavior.Restrict);

        // Настройка промежуточной таблицы для Tank и Picture
        modelBuilder.Entity<TankPicture>()
            .HasKey(tp => new { tp.TankId, tp.PictureId });

        modelBuilder.Entity<TankPicture>()
            .HasOne(tp => tp.Tank)
            .WithMany(t => t.TankPictures)
            .HasForeignKey(tp => tp.TankId);

        modelBuilder.Entity<TankPicture>()
            .HasOne(tp => tp.Picture)
            .WithMany()
            .HasForeignKey(tp => tp.PictureId);

        // Настройка связи "один к одному" между Nation и Picture
        modelBuilder.Entity<Nation>()
            .HasOne(n => n.Picture)
            .WithOne()
            .HasForeignKey<Nation>(n => n.PictureId);

        base.OnModelCreating(modelBuilder);
    }

}