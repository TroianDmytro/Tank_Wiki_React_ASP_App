// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Tank_Wiki_React_ASP_App.Server.Models.ModelsManyToMany;

namespace Tank_Wiki_React_ASP_App.Server.Models;

public partial class db_TankWikiContext : DbContext
{
    //MySqlDBContext 
    public db_TankWikiContext()
    {
    }

    public db_TankWikiContext(DbContextOptions<db_TankWikiContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Armor> Armors { get; set; }

    public virtual DbSet<Engine> Engines { get; set; }

    public virtual DbSet<Gun> Guns { get; set; }

    public virtual DbSet<Nation> Nations { get; set; }

    public virtual DbSet<Radio> Radios { get; set; }

    public virtual DbSet<Suspension> Suspensions { get; set; }

    public virtual DbSet<Tank> Tanks { get; set; }

    public virtual DbSet<TankType> TankTypes { get; set; }

    public virtual DbSet<Turret> Turrets { get; set; }

    ////////////////////////////////  ModelOneToMany
    public DbSet<TurretGun> TurretGuns { get; set; }
    public DbSet<TankTurret> TankTurrets { get; set; }
    public DbSet<TankEngine> TankEngines { get; set; }
    public DbSet<TankSuspension> TankSuspensions { get; set; }
    public DbSet<TankRadio> TankRadios { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=database-1.c1em8wg8ghmk.eu-central-1.rds.amazonaws.com,1433;Initial Catalog=db_TankWiki;User ID=IronFalcon;Password=Plok1993;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Cyrillic_General_CI_AS");

        modelBuilder.Entity<Armor>(entity =>
        {
            entity.HasIndex(e => e.TankId, "IX_Armors_TankId")
                .IsUnique()
                .HasFilter("([TankId] IS NOT NULL)");

            entity.Property(e => e.Name).HasDefaultValue("");
        });

        modelBuilder.Entity<Engine>(entity =>
        {
            entity.HasMany(d => d.Tanks).WithMany(p => p.Engines)
                .UsingEntity<Dictionary<string, object>>(
                    "TankEngine",
                    r => r.HasOne<Tank>().WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Engine>().WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("EngineId", "TankId");
                        j.ToTable("TankEngines");
                        j.HasIndex(new[] { "TankId" }, "IX_TankEngines_TankId");
                    });
        });

        modelBuilder.Entity<Radio>(entity =>
        {
            entity.HasMany(d => d.Tanks).WithMany(p => p.Radios)
                .UsingEntity<Dictionary<string, object>>(
                    "TankRadio",
                    r => r.HasOne<Tank>().WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Radio>().WithMany()
                        .HasForeignKey("RadioId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("RadioId", "TankId");
                        j.ToTable("TankRadios");
                        j.HasIndex(new[] { "TankId" }, "IX_TankRadios_TankId");
                    });
        });

        modelBuilder.Entity<Suspension>(entity =>
        {
            entity.HasMany(d => d.Tanks).WithMany(p => p.Suspensions)
                .UsingEntity<Dictionary<string, object>>(
                    "TankSuspension",
                    r => r.HasOne<Tank>().WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Suspension>().WithMany()
                        .HasForeignKey("SuspensionId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("SuspensionId", "TankId");
                        j.ToTable("TankSuspensions");
                        j.HasIndex(new[] { "TankId" }, "IX_TankSuspensions_TankId");
                    });
        });

        modelBuilder.Entity<Turret>(entity =>
        {
            entity.HasMany(d => d.Guns).WithMany(p => p.Turrets)
                .UsingEntity<Dictionary<string, object>>(
                    "TurretGun",
                    r => r.HasOne<Gun>().WithMany()
                        .HasForeignKey("GunId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Turret>().WithMany()
                        .HasForeignKey("TurretId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("TurretId", "GunId");
                        j.ToTable("TurretGuns");
                        j.HasIndex(new[] { "GunId" }, "IX_TurretGuns_GunId");
                    });

            entity.HasMany(d => d.Tanks).WithMany(p => p.Turrets)
                .UsingEntity<Dictionary<string, object>>(
                    "TankTurret",
                    r => r.HasOne<Tank>().WithMany()
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Turret>().WithMany()
                        .HasForeignKey("TurretId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("TurretId", "TankId");
                        j.ToTable("TankTurrets");
                        j.HasIndex(new[] { "TankId" }, "IX_TankTurrets_TankId");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}